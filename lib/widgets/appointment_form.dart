// widgets/appointment_form.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/appointment.dart';
import '../models/patient.dart';
import '../l10n/app_localizations.dart';
import '../screens/home_screen.dart';

class AppointmentForm extends ConsumerStatefulWidget {
  final List<Patient> patients;
  final void Function(Appointment) onSave;
  const AppointmentForm({Key? key, required this.patients, required this.onSave}) : super(key: key);

  @override
  ConsumerState<AppointmentForm> createState() => _AppointmentFormState();
}

class _AppointmentFormState extends ConsumerState<AppointmentForm> {
  final _formKey = GlobalKey<FormState>();
  String? _selectedPatientId;
  DateTime? _selectedDateTime;

  void _pickDateTime() async {
    final date = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (date == null) return;
    final time = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );
    if (time == null) return;
    setState(() {
      _selectedDateTime = DateTime(date.year, date.month, date.day, time.hour, time.minute);
    });
  }

  void _submit() {
    if (_formKey.currentState!.validate() && _selectedDateTime != null) {
      try {
        final currentLocale = ref.watch(localeProvider);
        final localizations = AppLocalizations(currentLocale);
        final appointment = Appointment(
          id: '', // Will be auto-generated by database
          patientId: _selectedPatientId!,
          appointmentTime: _selectedDateTime!,
        );
        print('Form: Creating appointment: ${appointment.toMap()}');
        print('Form: Selected patient ID: $_selectedPatientId');
        print('Form: Selected date time: $_selectedDateTime');
        print('Form: Appointment patientId: ${appointment.patientId}');
        widget.onSave(appointment);
        Navigator.of(context).pop();
      } catch (e) {
        print('Error creating appointment: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final currentLocale = ref.watch(localeProvider);
    final localizations = AppLocalizations(currentLocale);
    
    return AlertDialog(
      title: Row(
        children: [
          const Icon(
            Icons.calendar_today,
            color: Color(0xFF1976D2),
          ),
          const SizedBox(width: 8),
          Text(
            localizations.get('schedule_new_appointment'),
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              color: Color(0xFF1976D2),
            ),
          ),
        ],
      ),
      content: Form(
        key: _formKey,
        child: SizedBox(
          width: 300,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              DropdownButtonFormField<String>(
                value: _selectedPatientId,
                items: widget.patients
                    .map((p) => DropdownMenuItem(value: p.id, child: Text(p.name)))
                    .toList(),
                onChanged: (v) => setState(() => _selectedPatientId = v),
                decoration: InputDecoration(labelText: localizations.get('patient')),
                validator: (v) => v == null ? localizations.get('select_patient') : null,
              ),
              const SizedBox(height: 10),
              Row(
                children: [
                  Expanded(
                    child: Text(_selectedDateTime == null
                        ? localizations.get('no_date_time_chosen')
                        : _selectedDateTime.toString()),
                  ),
                  IconButton(
                    icon: const Icon(Icons.calendar_today),
                    onPressed: _pickDateTime,
                  ),
                ],
              ),
              if (_selectedDateTime == null)
                Text(localizations.get('pick_date_and_time'), style: const TextStyle(color: Colors.red)),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(), 
          child: Text(localizations.get('cancel'))
        ),
        ElevatedButton(
          onPressed: _submit, 
          child: Text(localizations.get('save'))
        ),
      ],
    );
  }
} 